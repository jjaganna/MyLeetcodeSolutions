{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Arial-BoldMT;\f1\fnil\fcharset0 HelveticaNeue;\f2\froman\fcharset0 Times-Roman;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;\red255\green255\blue255;\red0\green0\blue233;
\red0\green0\blue0;\red51\green51\blue51;\red151\green0\blue126;\red245\green247\blue249;\red29\green38\blue42;
\red73\green17\blue135;\red20\green0\blue196;\red12\green90\blue1;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c93333;
\cssrgb\c0\c0\c0\c85098;\cssrgb\c25882\c25882\c25882;\cssrgb\c66667\c5098\c56863;\cssrgb\c96863\c97647\c98039;\cssrgb\c14902\c19608\c21961;
\cssrgb\c36078\c14902\c60000;\cssrgb\c10980\c0\c81176;\cssrgb\c0\c41569\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww20320\viewh11180\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Problem # 967. {\field{\*\fldinst{HYPERLINK "https://leetcode.com/problems/numbers-with-same-consecutive-differences"}}{\fldrslt 
\f1\b0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Numbers With Same Consecutive Differences\
\
}}\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://leetcode.com/problems/numbers-with-same-consecutive-differences/"}}{\fldrslt 
\f2\b0\fs28 \cf4 \expnd0\expndtw0\kerning0
\ul \ulc4 \outl0\strokewidth0 \strokec4 https://leetcode.com/problems/numbers-with-same-consecutive-differences/}}{\field{\*\fldinst{HYPERLINK "https://leetcode.com/problems/numbers-with-same-consecutive-differences"}}{\fldrslt 
\f1\b0\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
}}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0

\fs32 \cf5 \cb3 \strokec5 Simple Python 3 solutions using two approaches -- string and integer\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl340\sa280\partightenfactor0

\fs28 \cf6 \strokec6 I first solved this problem using a string approach. The runtime beats 87.5%\uc0\u8232 However, the integers approach is better and uses less memory as well with runtime beats 97.22%\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls1\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 String approach:\uc0\u8232 To get the last digit of the number, I converted the number to a string and then took index = -1.\
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs26 \cf7 \cb8 \strokec7 class\cf9 \strokec9  \cf10 \strokec10 Solution\cf9 \strokec9 :\
    \cf7 \strokec7 def\cf9 \strokec9  \cf11 \strokec11 numsSameConsecDiff\cf10 \strokec10 (self, N: int, K: int)\cf9 \strokec9  -> List[int]:\
     \
        \cf7 \strokec7 if\cf9 \strokec9  N == \cf11 \strokec11 1\cf9 \strokec9 :\
            \cf7 \strokec7 return\cf9 \strokec9 (list(range(\cf11 \strokec11 10\cf9 \strokec9 )))\
        res = [str(x) \cf7 \strokec7 for\cf9 \strokec9  x \cf7 \strokec7 in\cf9 \strokec9  range(\cf11 \strokec11 1\cf9 \strokec9 , \cf11 \strokec11 10\cf9 \strokec9 )]\
\
        i = \cf11 \strokec11 1\cf9 \strokec9   \cf12 \strokec12 # counter for length if the string\cf9 \strokec9 \
        \cf7 \strokec7 while\cf9 \strokec9  i < N:\
            alist = []\
            \cf7 \strokec7 for\cf9 \strokec9  item \cf7 \strokec7 in\cf9 \strokec9  res:\
                num = int(item[\cf11 \strokec11 -1\cf9 \strokec9 ])  \cf12 \strokec12 #  get the last digit of the number\cf9 \strokec9 \
                \cf7 \strokec7 if\cf9 \strokec9  K == \cf11 \strokec11 0\cf9 \strokec9 :\
                    alist.append(item + item[\cf11 \strokec11 -1\cf9 \strokec9 ])\
                \cf7 \strokec7 else\cf9 \strokec9 :\
                    \cf7 \strokec7 if\cf9 \strokec9  num - K >= \cf11 \strokec11 0\cf9 \strokec9 :\
                        alist.append(item + str(num - K)) \cf12 \strokec12 # append the newly calculated digit as string\cf9 \strokec9 \
                    \cf7 \strokec7 if\cf9 \strokec9  num + K < \cf11 \strokec11 10\cf9 \strokec9 :\
                        alist.append(item + str(num + K)) \cf12 \strokec12 # append the newly calculated digit as string\cf9 \strokec9 \
            \
            res = alist  \
            i += \cf11 \strokec11 1\cf9 \strokec9 \
       \
        \cf7 \strokec7 return\cf9 \strokec9 (res)\
\cf12 \strokec12 #----------------------------------------\cf9 \strokec9 \
\cf11 \strokec11 2.\cf9 \strokec9   I then thought that working directly \cf7 \strokec7 with\cf9 \strokec9  integers will be faster.\
So I used the number approach. To get the last digit of a number,  I used Modulo operator %.\
To shift the number to the left by one digit, I multiplied the number by \cf11 \strokec11 10.\cf9 \strokec9 \
\
\pard\pardeftab720\sl340\sa280\partightenfactor0

\f1\fs28 \cf6 \cb3 \strokec6 class Solution:\cb1 \uc0\u8232 \cb3 def numsSameConsecDiff(self, N: int, K: int) -> List[int]:\cb1 \uc0\u8232 \cb3 if N == 1:\cb1 \uc0\u8232 \cb3 return(list(range(10)))\
\
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs26 \cf9 \cb8 \strokec9     res = list(\cf7 \strokec7 range\cf9 \strokec9 (\cf11 \strokec11 1\cf9 \strokec9 , \cf11 \strokec11 10\cf9 \strokec9 ))\
    i = \cf11 \strokec11 1\cf9 \strokec9 \
    while i < N:\
        alist = []\
        \cf7 \strokec7 for\cf9 \strokec9  num in res:\
            \cf7 \strokec7 if\cf9 \strokec9  K == \cf11 \strokec11 0\cf9 \strokec9 :\
                alist.\cf10 \strokec10 append\cf9 \strokec9 ((num * \cf11 \strokec11 10\cf9 \strokec9 ) + num % \cf11 \strokec11 10\cf9 \strokec9 )\
            \cf7 \strokec7 else\cf9 \strokec9 :\
                \cf7 \strokec7 if\cf9 \strokec9  (num % \cf11 \strokec11 10\cf9 \strokec9 ) + K < \cf11 \strokec11 10\cf9 \strokec9 :\
                    alist.\cf10 \strokec10 append\cf9 \strokec9 ((num * \cf11 \strokec11 10\cf9 \strokec9 ) + (num%\cf11 \strokec11 10\cf9 \strokec9 ) + K)\
                \cf7 \strokec7 if\cf9 \strokec9  (num % \cf11 \strokec11 10\cf9 \strokec9 ) - K >= \cf11 \strokec11 0\cf9 \strokec9 :\
                    alist.\cf10 \strokec10 append\cf9 \strokec9 ((num * \cf11 \strokec11 10\cf9 \strokec9 ) + (num%\cf11 \strokec11 10\cf9 \strokec9 ) - K)\
        res = alist\
        i += \cf11 \strokec11 1\cf9 \strokec9 \
\
    \cf7 \strokec7 return\cf9 \strokec9 (res)\
\pard\pardeftab720\sl340\sa280\partightenfactor0

\f1\fs28 \cf6 \cb1 \strokec6 \
===============================================\
\
\pard\pardeftab720\sl420\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://leetcode.com/problems/numbers-with-same-consecutive-differences"}}{\fldrslt 
\fs36 \cf2 \strokec2 \
}}}