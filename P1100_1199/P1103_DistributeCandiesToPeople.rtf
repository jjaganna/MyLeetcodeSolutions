{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red51\green51\blue51;\red255\green255\blue255;
\red151\green0\blue126;\red245\green247\blue249;\red29\green38\blue42;\red73\green17\blue135;\red20\green0\blue196;
\red12\green90\blue1;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;\cssrgb\c25882\c25882\c25882;\cssrgb\c100000\c100000\c100000;
\cssrgb\c66667\c5098\c56863;\cssrgb\c96863\c97647\c98039;\cssrgb\c14902\c19608\c21961;\cssrgb\c36078\c14902\c60000;\cssrgb\c10980\c0\c81176;
\cssrgb\c0\c41569\c0;\cssrgb\c0\c0\c0\c85098;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww14300\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Problem # 1103  : Distribute Candies to People\
\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://leetcode.com/problems/distribute-candies-to-people/"}}{\fldrslt 
\f1\fs28 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://leetcode.com/problems/distribute-candies-to-people/}}
\f1 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 \

\f0 \cf0 \kerning1\expnd0\expndtw0 \ulnone \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Python 3 Solutions \'97 Brute Force solution and improved solution\
\
\pard\pardeftab720\sl340\sa280\partightenfactor0

\f2\fs28 \cf3 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 My first approach to solving this problem was the brute force method.\cb1 \uc0\u8232 \cb4 My runtime for the Brute Force solution beats 73.32%.\cb1 \uc0\u8232 \cb4 Then I did some improvement on this method and this improved method runtime beats 98.59%.\
\
Method 1: Brute Force Solution: The candies are distributed to each person in turn and the number of candies left is calculated.\
\
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs26 \cf5 \cb6 \strokec5 class\cf7 \strokec7  \cf8 \strokec8 Solution\cf7 \strokec7 :\
    \cf5 \strokec5 def\cf7 \strokec7  \cf9 \strokec9 distributeCandies\cf8 \strokec8 (self, candies: int, num_people: int)\cf7 \strokec7  -> List[int]:\
        \
        index = \cf9 \strokec9 0\cf7 \strokec7 \
        arr = [\cf9 \strokec9 0\cf7 \strokec7 ] * num_people\
\
        \cf5 \strokec5 while\cf7 \strokec7  candies > \cf9 \strokec9 0\cf7 \strokec7 :\
            i = index % num_people  \cf10 \strokec10 # i th person\cf7 \strokec7 \
            \cf5 \strokec5 if\cf7 \strokec7  candies >= index + \cf9 \strokec9 1\cf7 \strokec7 :  \cf10 \strokec10 # candies left is greater than what the i th person's share\cf7 \strokec7 \
                arr[i] += index + \cf9 \strokec9 1\cf7 \strokec7   \cf10 \strokec10 # give the i th person his/her share\cf7 \strokec7 \
                candies = candies -  (index + \cf9 \strokec9 1\cf7 \strokec7 )  \cf10 \strokec10 # candies remaining\cf7 \strokec7 \
                index += \cf9 \strokec9 1\cf7 \strokec7   \cf10 \strokec10 # increment the index  \cf7 \strokec7 \
            \cf5 \strokec5 else\cf7 \strokec7 :  \cf10 \strokec10 # candies < index + 1  i.e. there are fewer candies than (index + 1)\cf7 \strokec7 \
                arr[i] += candies  \cf10 \strokec10 # given the remaining candies to the i th person\cf7 \strokec7 \
                candies = \cf9 \strokec9 0\cf7 \strokec7   \cf10 \strokec10 #  no candy is left as we gave away the last candies to the i th person\cf7 \strokec7 \
\
        \cf5 \strokec5 return\cf7 \strokec7 (arr)\
\pard\pardeftab720\sl340\sa280\partightenfactor0

\f2\fs28 \cf3 \cb4 \strokec3 \
Method 2 : Improved method:\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 This is what is done in the first while loop. Calculate how many whole (or full) rounds of candy where every person gets the full share. Then there will the last round where some people will get candy and some may not and again a person getting the candy in the last round may not get his/her full share.\cb1 \uc0\u8232 \cb4 The last round of candy is distributed to each person here in the else statement.\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 In the last for loop, the candies are distributed for the whole rounds, i.e. for all the rounds except the last one.\cb1 \
\pard\pardeftab720\sl340\sa280\partightenfactor0
\cf3 \cb4 \
The i th person gets candies as follows:\cb1 \uc0\u8232 \cb4 1st round : i + 1\cb1 \uc0\u8232 \cb4 2nd round : num_people + i + 1\cb1 \uc0\u8232 \cb4 3rd round : (2 * num_people) + i + 1\cb1 \uc0\u8232 \cb4 4th round : (3 * num_people) + i + 1\cb1 \uc0\u8232 \cb4 ...\cb1 \uc0\u8232 \cb4 rth round: ((r - 1) * num_people) + i + 1\cb1 \uc0\u8232 \cb4 Total candies that the ith person gets in r full rounds =\cb1 \uc0\u8232 \cb4 r * (i + 1) + num_people * ( 1 + 2 + ... + (r-1))\
\
= r * (i + 1) + num_people * (r *(r-1)/2)\
\
I have used the formula that the sum of the first n natural numbers = n * (n + 1) /2\
\
\pard\pardeftab720\sl300\sa120\partightenfactor0

\fs24 \cf11 \strokec11 My runtime for this solution beats 95t.94%\
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs26 \cf5 \cb6 \strokec5 import\cf7 \strokec7  math\
\cf5 \strokec5 class\cf7 \strokec7  \cf8 \strokec8 Solution\cf7 \strokec7 :\
    \cf5 \strokec5 def\cf7 \strokec7  \cf9 \strokec9 distributeCandies\cf8 \strokec8 (self, candies: int, num_people: int)\cf7 \strokec7  -> List[int]:\
        arr = [\cf9 \strokec9 0\cf7 \strokec7 ] * num_people\
        rounds = \cf9 \strokec9 0\cf7 \strokec7 \
        \cf5 \strokec5 while\cf7 \strokec7  candies > \cf9 \strokec9 0\cf7 \strokec7 :\
            candies4WholeRound = int((num_people * (num_people + \cf9 \strokec9 1\cf7 \strokec7 ))/\cf9 \strokec9 2\cf7 \strokec7    +  (num_people *num_people)*rounds)\
            \cf5 \strokec5 if\cf7 \strokec7  candies >= candies4WholeRound:\
                candies -= candies4WholeRound\
                rounds += \cf9 \strokec9 1\cf7 \strokec7 \
            \cf5 \strokec5 else\cf7 \strokec7 : \cf10 \strokec10 # distribute the candies to each person until candies run out-- last round\cf7 \strokec7 \
                \cf5 \strokec5 for\cf7 \strokec7  i \cf5 \strokec5 in\cf7 \strokec7  range(num_people):\
                    \cf5 \strokec5 if\cf7 \strokec7  candies >= num_people * rounds + i + \cf9 \strokec9 1\cf7 \strokec7 :\
                        arr[i] += num_people * rounds + i + \cf9 \strokec9 1\cf7 \strokec7 \
                        candies -= num_people * rounds + i + \cf9 \strokec9 1\cf7 \strokec7 \
                    \cf5 \strokec5 else\cf7 \strokec7 :\
                        arr[i] += candies\
                        candies = \cf9 \strokec9 0\cf7 \strokec7 \
\
       \cf10 \strokec10 # Now distribute the whole rounds of candies\cf7 \strokec7 \
        \cf5 \strokec5 for\cf7 \strokec7  i \cf5 \strokec5 in\cf7 \strokec7  range(num_people):\
            arr[i] += int((i+\cf9 \strokec9 1\cf7 \strokec7 )*rounds + num_people * rounds * (rounds - \cf9 \strokec9 1\cf7 \strokec7 )/\cf9 \strokec9 2\cf7 \strokec7 )\
            \
        \cf5 \strokec5 return\cf7 \strokec7 (arr)\
\pard\pardeftab720\sl340\sa280\partightenfactor0

\f2\fs28 \cf3 \cb4 \strokec3 \
\pard\pardeftab720\sl340\partightenfactor0
\cf3 Please let me know if you have any questions.\
}